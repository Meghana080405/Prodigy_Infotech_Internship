# -*- coding: utf-8 -*-
"""Task3_SVM_CatDog_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BoTL8z4N38T7C_egUqMccHJbTfFA71Xh
"""

from google.colab import files
uploaded = files.upload()  # upload training_set.zip and test_set.zip

!unzip "archive (2).zip" -d /content/

!ls /content/

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# ‚úÖ Correct folder paths based on your structure
train_cat_dir = '/content/training_set/training_set/cats'
train_dog_dir = '/content/training_set/training_set/dogs'
test_cat_dir = '/content/test_set/test_set/cats'
test_dog_dir = '/content/test_set/test_set/dogs'

IMG_SIZE = 64  # Resize to 64x64 pixels

def load_images(folder, label):
    data = []
    for file in os.listdir(folder):
        try:
            img_path = os.path.join(folder, file)
            img = cv2.imread(img_path)
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
            img = img.flatten()
            data.append((img, label))
        except Exception as e:
            print("Error loading:", file, "-", e)
    return data

# Load training images
train_data = load_images(train_cat_dir, 0) + load_images(train_dog_dir, 1)
np.random.shuffle(train_data)

X_train = np.array([item[0] for item in train_data])
y_train = np.array([item[1] for item in train_data])

# Load testing images
test_data = load_images(test_cat_dir, 0) + load_images(test_dog_dir, 1)
np.random.shuffle(test_data)

X_test = np.array([item[0] for item in test_data])
y_test = np.array([item[1] for item in test_data])

# Scale (normalize) the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print("‚úÖ Data loaded and preprocessed successfully!")
print("Training samples:", len(X_train))
print("Testing samples:", len(X_test))

from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Create and train the SVM model
print("Training SVM model... this may take a few minutes ‚è≥")
svm_model = SVC(kernel='linear')  # You can also try 'rbf' later for better accuracy
svm_model.fit(X_train, y_train)

# Predict on test set
y_pred = svm_model.predict(X_test)

# Evaluate model
acc = accuracy_score(y_test, y_pred)
print("\n‚úÖ Model trained successfully!")
print(f"üìä Accuracy: {acc * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['Cat', 'Dog']))

from google.colab import files
uploaded = files.upload()  # Upload a single image (jpg/png)

import matplotlib.pyplot as plt
import cv2
import numpy as np

# Get the uploaded file name
for fn in uploaded.keys():
    test_img_path = fn

# Load the image
img = cv2.imread(test_img_path)
img_resized = cv2.resize(img, (64, 64)).flatten()
img_scaled = scaler.transform([img_resized])

# Predict
prediction = svm_model.predict(img_scaled)
label = 'Dog' if prediction[0] == 1 else 'Cat'

# Show image with prediction
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title(f"Prediction: {label}")
plt.axis('off')
plt.show()

import joblib

# Save the trained SVM model
joblib.dump(svm_model, 'svm_cats_dogs_model.pkl')
print("‚úÖ Model saved as 'svm_cats_dogs_model.pkl'")

# Optionally, save the scaler too (needed for preprocessing new images)
joblib.dump(scaler, 'scaler.pkl')
print("‚úÖ Scaler saved as 'scaler.pkl'")